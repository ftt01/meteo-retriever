# Slim Docker multi-stage build

# Build image
ARG PYTHON_VERSION=3.7.7
ARG ECCODES_VERSION=2.17.1
FROM deutscherwetterdienst/python-eccodes:${PYTHON_VERSION}-${ECCODES_VERSION}-latest as build

ARG DEBIAN_RELEASE=buster /etc/*-release 2> /dev/null | grep PRETTY_NAME
ARG sourcesListFile=/etc/apt/sources.list
ARG repository=http://deb.debian.org/debian/
ARG securityRepository=http://security.debian.org/debian-security

RUN echo "Writes /etc/apt/sources.list in order to add $DEBIAN_RELEASE non-free repository"

RUN echo "deb $repository $DEBIAN_RELEASE main contrib non-free" > $sourcesListFile
RUN echo "deb-src $repository $DEBIAN_RELEASE main contrib non-free" >> $sourcesListFile

RUN echo "" >> $sourcesListFile

RUN echo "deb $securityRepository $DEBIAN_RELEASE/updates main contrib non-free" >> $sourcesListFile
RUN echo "deb-src $securityRepository $DEBIAN_RELEASE/updates main contrib non-free" >> $sourcesListFile

RUN echo "" >> $sourcesListFile

RUN echo "# $DEBIAN_RELEASE-updates, previously known as "volatile"" >> $sourcesListFile
RUN echo "deb $repository $DEBIAN_RELEASE-updates main contrib non-free" >> $sourcesListFile
RUN echo "deb-src $repository $DEBIAN_RELEASE-updates main contrib non-free" >> $sourcesListFile

# RUN sed -i 's/stable\/updates/stable-security\/updates/' /etc/apt/sources.list
# RUN sed -i s/deb.debian.org/archive.debian.org/g /etc/apt/sources.list
# RUN sed -i 's|security.debian.org|archive.debian.org|g' /etc/apt/sources.list 
# RUN sed -i '/stretch-updates/d' /etc/apt/sources.list

#RUN apt-get install -y gpg

#RUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0E98404D386FA1D9 6ED0E7B82643E131 F8D2585B8783D481 54404762BBB6E853 BDE6D2B9216EC7A8

RUN apt-get update && apt-get install -y debian-archive-keyring && apt-get clean

RUN apt-get update && apt-get -y upgrade
RUN apt-get install -y build-essential

RUN set -ex \
    && apt-get update \
    && apt-get install --yes --no-install-suggests --no-install-recommends \
      bison \
      bzip2 \
      ca-certificates \
    #   cmake \
      curl \
      wget \
      file \
      flex \
    #   g++-8 \
    #   gcc-8 \
    #   gfortran-8 \
      git \
      make \
      patch \
      swig \
      sudo \
      xz-utils \
      libssl-dev

# RUN set -ex \
#     && ln -s /usr/bin/g++-8 /usr/bin/g++ \
#     && ln -s /usr/bin/gcc-8 /usr/bin/gcc \
#     && ln -s /usr/bin/gfortran-8 /usr/bin/gfortran

# Install Climate Data Operator (CDO) with NetCDF, GRIB2 and HDF5 support
# see https://code.mpimet.mpg.de/projects/cdo/embedded/index.html#x1-30001.1
# see http://www.studytrails.com/blog/install-climate-data-operator-cdo-with-netcdf-grib2-and-hdf5-support/

# Install CMake
ARG CMAKE_VERSION=3.31.1
RUN set -ex \
    && mkdir -p /src \
    && cd /src \
    && echo "Installing CMake version ${CMAKE_VERSION} ..." \
    && wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz \
    && tar -xzvf cmake-${CMAKE_VERSION}.tar.gz \
    && cd cmake-${CMAKE_VERSION} \
    && ./bootstrap \
    && make && make install

# Install build-time dependencies for NetCDF, HDF5 and CDO
RUN set -ex \
    && apt-get install --yes --no-install-suggests --no-install-recommends \
      libcurl4-gnutls-dev

# Install ZLIB 
# from source
# ZLIB source from https://zlib.net
ARG ZLIB_VERSION=1.3.1
RUN set -ex \
    && mkdir -p /src \
    && cd /src \
    && echo "Installing zlib version ${ZLIB_VERSION} ..." \
    && wget https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz \
    && tar -xzvf zlib-${ZLIB_VERSION}.tar.gz \
    && cd zlib-${ZLIB_VERSION} \
    && ./configure --prefix /usr/local \
    && make && make check && make install \
    && /sbin/ldconfig
# # from ubuntu repo
# RUN apt-get install zlib1g

# Install HDF5 from source
# HDF5 source from https://github.com/live-clones/hdf5
ARG HDF5_VERSION=hdf5-1_14_3
RUN set -ex \
    && mkdir -p /src \
    && cd /src \
    && echo "Installing HDF5 version ${HDF5_VERSION} ..." \
    && git clone https://github.com/HDFGroup/hdf5 && cd hdf5 && git checkout ${HDF5_VERSION} \
    && ./configure \
        --prefix /usr/local \
        --with-zlib=/usr/local \
        --enable-threadsafe \
        --enable-unsupported \
          CFLAGS=-fPIC \
    && make && make check && make install \
    && /sbin/ldconfig

# Install NetCDF from source
# NetCDF source from http://www.unidata.ucar.edu/downloads/netcdf/index.jsp
ARG NETCDF_VERSION=4.7.4
RUN set -ex \
    && mkdir -p /src \
    && cd /src \
    && echo "Installing NetCDF version ${NETCDF_VERSION} ..." \
    && wget https://github.com/Unidata/netcdf-c/archive/refs/tags/v${NETCDF_VERSION}.tar.gz \
    # && wget https://www.unidata.ucar.edu/downloads/netcdf/ftp/netcdf-c-${NETCDF_VERSION}.tar.gz \
    && tar -xf v${NETCDF_VERSION}.tar.gz \
    # && tar -xvf netcdf-c-${NETCDF_VERSION}.tar.gz \
    && cd netcdf-c-${NETCDF_VERSION} \
    && CPPFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib \
    && ./configure \
        --prefix /usr/local \
        --with-hdf5=/usr/local \
        --with-zlib=/usr/local \
        --enable-netcdf-4 \
          CFLAGS=-fPIC \
    && make && make check && make install \
    && /sbin/ldconfig

# Install JasPer from source
# JasPer source from https://github.com/mdadams/jasper
ARG JASPER_VERSION=version-4.2.4
ARG JASPER_SOURCE_DIR=./
ARG JASPER_BUILD_DIR=/src/jasper/release
ARG JASPER_INSTALL_DIR=/usr/local
RUN set -ex \
    && mkdir -p ~/src \
    && cd ~/src \
    && echo "Installing JasPer version ${JASPER_VERSION} ..." \
    && git clone https://github.com/mdadams/jasper.git && cd jasper && git checkout ${JASPER_VERSION} \
    && cmake -G "Unix Makefiles" \
        -S${JASPER_SOURCE_DIR} \
        -B${JASPER_BUILD_DIR} \
        -DCMAKE_INSTALL_PREFIX=${JASPER_INSTALL_DIR} \
        -DCMAKE_BUILD_TYPE=Release \
    && cd ${JASPER_BUILD_DIR} \
    && make clean all && make install \
    && /sbin/ldconfig

# Install CDO
# CDO source code from https://code.mpimet.mpg.de/projects/cdo/files
ARG CDO_VERSION=1.9.8
RUN set -ex \
    && mkdir -p /src \
    && cd /src \
    && echo "Installing CDO version ${CDO_VERSION} ..." \
    && wget https://code.mpimet.mpg.de/attachments/download/20826/cdo-${CDO_VERSION}.tar.gz \
    && tar -xf cdo-${CDO_VERSION}.tar.gz \
    && cd cdo-${CDO_VERSION} \
    && ./configure --prefix /usr/local CFLAGS=-fPIC  \
            --with-netcdf=/usr/local \
            --with-jasper=/usr/local \
            --with-hdf5=/usr/local \
            --with-eccodes=/usr/local \
    && make && make check && make install \
    && /sbin/ldconfig

# Remove unneeded files.
RUN set -ex \
    && find /usr/local -name 'lib*.so' | xargs -r -- strip --strip-unneeded || true \
    && find /usr/local/bin | xargs -r -- strip --strip-all || true \
    && find /usr/local/lib -name __pycache__ | xargs -r -- rm -rf

#
# Minimal run-time image.
#
FROM debian:stable-slim as minimal

# Install run-time dependencies
RUN set -ex \
    && apt-get update \
    && apt-get install --yes --no-install-suggests --no-install-recommends \
      libcurl4-gnutls-dev \
      libopenjp2-7 \
      libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Copy CDO and associated libraries
COPY --from=build /usr/local/share/eccodes /usr/local/share/eccodes
COPY --from=build /usr/local/bin/ /usr/local/bin/
COPY --from=build /usr/local/lib/ /usr/local/lib/
# header files
COPY --from=build /usr/local/include/ /usr/local/include/
# eccodes-python
COPY --from=build /src/eccodes-python/ /src/eccodes-python/

# Ensure shared libs installed by the previous step are available.
RUN set -ex && /sbin/ldconfig

################################
# Model: ICON-D2-EPS
################################
# Intermediate image with additional tools
FROM minimal as icon-d2-eps-intermediate

# Install run-time dependencies
RUN set -ex \
    && apt-get update \
    && apt-get install --yes --no-install-suggests --no-install-recommends \
      bzip2 \
      ca-certificates \
      curl \
      wget \
    && rm -rf /var/lib/apt/lists/*

ARG MODEL_NAME=icon-d2-eps

# copy samples and descriptions
COPY /data/samples/${MODEL_NAME} /data/samples/${MODEL_NAME}
COPY /data/descriptions/${MODEL_NAME} /data/descriptions/${MODEL_NAME}

# download grid definition and generate weights
ARG GRID_FILENAME=icon_grid_0047_R19B07_L.nc.bz2
ARG NC_GRID_NUMBER=2
RUN set -ex \
    && mkdir -p /data/grids/${MODEL_NAME} \
    && cd /data/grids/${MODEL_NAME} \
    && wget -O ${MODEL_NAME}_grid.nc.bz2 https://opendata.dwd.de/weather/lib/cdo/${GRID_FILENAME} \
    && bunzip2 ${MODEL_NAME}_grid.nc.bz2 \
    && mkdir -p /data/weights/${MODEL_NAME} \
    && cd /data/weights/${MODEL_NAME} \
    && echo Generating weights for ${MODEL_NAME} ... \
    && cdo \
         gennn,/data/descriptions/${MODEL_NAME}/${MODEL_NAME}_description.txt \
            -setgrid,/data/grids/${MODEL_NAME}/${MODEL_NAME}_grid.nc:${NC_GRID_NUMBER} \
            /data/samples/${MODEL_NAME}/${MODEL_NAME}_sample.grib2 \
            /data/weights/${MODEL_NAME}/${MODEL_NAME}_weights.nc \
    && cdo \
         gennn,/data/descriptions/${MODEL_NAME}/${MODEL_NAME}_rotated_description.txt \
            -setgrid,/data/grids/${MODEL_NAME}/${MODEL_NAME}_grid.nc:${NC_GRID_NUMBER} \
            /data/samples/${MODEL_NAME}/${MODEL_NAME}_sample.grib2 \
            /data/weights/${MODEL_NAME}/${MODEL_NAME}_rotated_weights.nc

## Minimal image for regridding with predefined output
FROM minimal as icon-d2-eps
COPY --from=icon-d2-eps-intermediate /data/descriptions /data/descriptions
COPY --from=icon-d2-eps-intermediate /data/weights /data/weights
ENV MODEL=icon-d2-eps
ENV DESCRIPTION_FILE=/data/descriptions/${MODEL}/${MODEL}_description.txt
ENV WEIGHTS_FILE=/data/weights/${MODEL}/${MODEL}_weights.nc

# ## Image with weights and sample data
# FROM minimal as icon-d2-eps-samples
# COPY --from=icon-d2-eps /data /data
# COPY --from=icon-d2-eps-intermediate /data/samples /data/samples
# ENV MODEL=icon-d2-eps
# ENV DESCRIPTION_FILE=/data/descriptions/${MODEL}/${MODEL}_description.txt
# ENV WEIGHTS_FILE=/data/weights/${MODEL}/${MODEL}_weights.nc
# ENV INPUT_FILE=/data/samples/${MODEL}/${MODEL}_sample.grib2
# ENV OUTPUT_FILE=/data/samples/${MODEL}/${MODEL}_output.grib2

# ## Image with grids, weights and samples
# FROM minimal as icon-d2-eps-grids
# COPY --from=icon-d2-eps-intermediate /data /data
# ENV MODEL=icon-d2-eps
# ENV DESCRIPTION_FILE=/data/descriptions/${MODEL}/${MODEL}_description.txt
# ENV WEIGHTS_FILE=/data/weights/${MODEL}/${MODEL}_weights.nc
# ENV INPUT_FILE=/data/samples/${MODEL}/${MODEL}_sample.grib2
# ENV OUTPUT_FILE=/data/samples/${MODEL}/${MODEL}_output.grib2
# ENV GRID_FILE=/data/grids/${MODEL}/${MODEL}_grid.nc

WORKDIR /home/icon-d2-eps/data/
CMD [ "/usr/local/bin/cdo" ]